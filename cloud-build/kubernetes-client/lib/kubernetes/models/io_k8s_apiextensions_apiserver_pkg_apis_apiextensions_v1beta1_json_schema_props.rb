=begin
#Kubernetes

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1.17.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.2.3-SNAPSHOT

=end

require 'date'

module Kubernetes
  # JSONSchemaProps is a JSON-Schema following Specification Draft 4 (http://json-schema.org/).
  class IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps
    attr_accessor :ref

    attr_accessor :schema

    # JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
    attr_accessor :additional_items

    # JSONSchemaPropsOrBool represents JSONSchemaProps or a boolean value. Defaults to true for the boolean property.
    attr_accessor :additional_properties

    attr_accessor :all_of

    attr_accessor :any_of

    # JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
    attr_accessor :default

    attr_accessor :definitions

    attr_accessor :dependencies

    attr_accessor :description

    attr_accessor :enum

    # JSON represents any valid JSON value. These types are supported: bool, int64, float64, string, []interface{}, map[string]interface{} and nil.
    attr_accessor :example

    attr_accessor :exclusive_maximum

    attr_accessor :exclusive_minimum

    attr_accessor :external_docs

    # format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:  - bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.
    attr_accessor :format

    attr_accessor :id

    # JSONSchemaPropsOrArray represents a value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes.
    attr_accessor :items

    attr_accessor :max_items

    attr_accessor :max_length

    attr_accessor :max_properties

    attr_accessor :maximum

    attr_accessor :min_items

    attr_accessor :min_length

    attr_accessor :min_properties

    attr_accessor :minimum

    attr_accessor :multiple_of

    attr_accessor :_not

    attr_accessor :nullable

    attr_accessor :one_of

    attr_accessor :pattern

    attr_accessor :pattern_properties

    attr_accessor :properties

    attr_accessor :required

    attr_accessor :title

    attr_accessor :type

    attr_accessor :unique_items

    # x-kubernetes-embedded-resource defines that the value is an embedded Kubernetes runtime.Object, with TypeMeta and ObjectMeta. The type must be object. It is allowed to further restrict the embedded object. kind, apiVersion and metadata are validated automatically. x-kubernetes-preserve-unknown-fields is allowed to be true, but does not have to be if the object is fully specified (up to kind, apiVersion, metadata).
    attr_accessor :x_kubernetes_embedded_resource

    # x-kubernetes-int-or-string specifies that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of anyOf is permitted if following one of the following patterns:  1) anyOf:    - type: integer    - type: string 2) allOf:    - anyOf:      - type: integer      - type: string    - ... zero or more
    attr_accessor :x_kubernetes_int_or_string

    # x-kubernetes-list-map-keys annotates an array with the x-kubernetes-list-type `map` by specifying the keys used as the index of the map.  This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to \"map\". Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).
    attr_accessor :x_kubernetes_list_map_keys

    # x-kubernetes-list-type annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:  1) `atomic`: the list is treated as a single entity, like a scalar.      Atomic lists will be entirely replaced when updated. This extension      may be used on any type of list (struct, scalar, ...). 2) `set`:      Sets are lists that must not have multiple items with the same value. Each      value must be a scalar, an object with x-kubernetes-map-type `atomic` or an      array with x-kubernetes-list-type `atomic`. 3) `map`:      These lists are like maps in that their elements have a non-index key      used to identify them. Order is preserved upon merge. The map tag      must only be used on a list with elements of type object. Defaults to atomic for arrays.
    attr_accessor :x_kubernetes_list_type

    # x-kubernetes-map-type annotates an object to further describe its topology. This extension must only be used when type is object and may have 2 possible values:  1) `granular`:      These maps are actual maps (key-value pairs) and each fields are independent      from each other (they can each be manipulated by separate actors). This is      the default behaviour for all maps. 2) `atomic`: the list is treated as a single entity, like a scalar.      Atomic maps will be entirely replaced when updated.
    attr_accessor :x_kubernetes_map_type

    # x-kubernetes-preserve-unknown-fields stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested properties or additionalProperties are specified in the schema. This can either be true or undefined. False is forbidden.
    attr_accessor :x_kubernetes_preserve_unknown_fields

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'ref' => :'$ref',
        :'schema' => :'$schema',
        :'additional_items' => :'additionalItems',
        :'additional_properties' => :'additionalProperties',
        :'all_of' => :'allOf',
        :'any_of' => :'anyOf',
        :'default' => :'default',
        :'definitions' => :'definitions',
        :'dependencies' => :'dependencies',
        :'description' => :'description',
        :'enum' => :'enum',
        :'example' => :'example',
        :'exclusive_maximum' => :'exclusiveMaximum',
        :'exclusive_minimum' => :'exclusiveMinimum',
        :'external_docs' => :'externalDocs',
        :'format' => :'format',
        :'id' => :'id',
        :'items' => :'items',
        :'max_items' => :'maxItems',
        :'max_length' => :'maxLength',
        :'max_properties' => :'maxProperties',
        :'maximum' => :'maximum',
        :'min_items' => :'minItems',
        :'min_length' => :'minLength',
        :'min_properties' => :'minProperties',
        :'minimum' => :'minimum',
        :'multiple_of' => :'multipleOf',
        :'_not' => :'not',
        :'nullable' => :'nullable',
        :'one_of' => :'oneOf',
        :'pattern' => :'pattern',
        :'pattern_properties' => :'patternProperties',
        :'properties' => :'properties',
        :'required' => :'required',
        :'title' => :'title',
        :'type' => :'type',
        :'unique_items' => :'uniqueItems',
        :'x_kubernetes_embedded_resource' => :'x-kubernetes-embedded-resource',
        :'x_kubernetes_int_or_string' => :'x-kubernetes-int-or-string',
        :'x_kubernetes_list_map_keys' => :'x-kubernetes-list-map-keys',
        :'x_kubernetes_list_type' => :'x-kubernetes-list-type',
        :'x_kubernetes_map_type' => :'x-kubernetes-map-type',
        :'x_kubernetes_preserve_unknown_fields' => :'x-kubernetes-preserve-unknown-fields'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'ref' => :'String',
        :'schema' => :'String',
        :'additional_items' => :'Object',
        :'additional_properties' => :'Object',
        :'all_of' => :'Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>',
        :'any_of' => :'Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>',
        :'default' => :'Object',
        :'definitions' => :'Hash<String, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>',
        :'dependencies' => :'Hash<String, Object>',
        :'description' => :'String',
        :'enum' => :'Array<Object>',
        :'example' => :'Object',
        :'exclusive_maximum' => :'Boolean',
        :'exclusive_minimum' => :'Boolean',
        :'external_docs' => :'IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1ExternalDocumentation',
        :'format' => :'String',
        :'id' => :'String',
        :'items' => :'Object',
        :'max_items' => :'Integer',
        :'max_length' => :'Integer',
        :'max_properties' => :'Integer',
        :'maximum' => :'Float',
        :'min_items' => :'Integer',
        :'min_length' => :'Integer',
        :'min_properties' => :'Integer',
        :'minimum' => :'Float',
        :'multiple_of' => :'Float',
        :'_not' => :'IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps',
        :'nullable' => :'Boolean',
        :'one_of' => :'Array<IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>',
        :'pattern' => :'String',
        :'pattern_properties' => :'Hash<String, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>',
        :'properties' => :'Hash<String, IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps>',
        :'required' => :'Array<String>',
        :'title' => :'String',
        :'type' => :'String',
        :'unique_items' => :'Boolean',
        :'x_kubernetes_embedded_resource' => :'Boolean',
        :'x_kubernetes_int_or_string' => :'Boolean',
        :'x_kubernetes_list_map_keys' => :'Array<String>',
        :'x_kubernetes_list_type' => :'String',
        :'x_kubernetes_map_type' => :'String',
        :'x_kubernetes_preserve_unknown_fields' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `Kubernetes::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `Kubernetes::IoK8sApiextensionsApiserverPkgApisApiextensionsV1beta1JSONSchemaProps`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'ref')
        self.ref = attributes[:'ref']
      end

      if attributes.key?(:'schema')
        self.schema = attributes[:'schema']
      end

      if attributes.key?(:'additional_items')
        self.additional_items = attributes[:'additional_items']
      end

      if attributes.key?(:'additional_properties')
        self.additional_properties = attributes[:'additional_properties']
      end

      if attributes.key?(:'all_of')
        if (value = attributes[:'all_of']).is_a?(Array)
          self.all_of = value
        end
      end

      if attributes.key?(:'any_of')
        if (value = attributes[:'any_of']).is_a?(Array)
          self.any_of = value
        end
      end

      if attributes.key?(:'default')
        self.default = attributes[:'default']
      end

      if attributes.key?(:'definitions')
        if (value = attributes[:'definitions']).is_a?(Hash)
          self.definitions = value
        end
      end

      if attributes.key?(:'dependencies')
        if (value = attributes[:'dependencies']).is_a?(Hash)
          self.dependencies = value
        end
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'enum')
        if (value = attributes[:'enum']).is_a?(Array)
          self.enum = value
        end
      end

      if attributes.key?(:'example')
        self.example = attributes[:'example']
      end

      if attributes.key?(:'exclusive_maximum')
        self.exclusive_maximum = attributes[:'exclusive_maximum']
      end

      if attributes.key?(:'exclusive_minimum')
        self.exclusive_minimum = attributes[:'exclusive_minimum']
      end

      if attributes.key?(:'external_docs')
        self.external_docs = attributes[:'external_docs']
      end

      if attributes.key?(:'format')
        self.format = attributes[:'format']
      end

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'items')
        self.items = attributes[:'items']
      end

      if attributes.key?(:'max_items')
        self.max_items = attributes[:'max_items']
      end

      if attributes.key?(:'max_length')
        self.max_length = attributes[:'max_length']
      end

      if attributes.key?(:'max_properties')
        self.max_properties = attributes[:'max_properties']
      end

      if attributes.key?(:'maximum')
        self.maximum = attributes[:'maximum']
      end

      if attributes.key?(:'min_items')
        self.min_items = attributes[:'min_items']
      end

      if attributes.key?(:'min_length')
        self.min_length = attributes[:'min_length']
      end

      if attributes.key?(:'min_properties')
        self.min_properties = attributes[:'min_properties']
      end

      if attributes.key?(:'minimum')
        self.minimum = attributes[:'minimum']
      end

      if attributes.key?(:'multiple_of')
        self.multiple_of = attributes[:'multiple_of']
      end

      if attributes.key?(:'_not')
        self._not = attributes[:'_not']
      end

      if attributes.key?(:'nullable')
        self.nullable = attributes[:'nullable']
      end

      if attributes.key?(:'one_of')
        if (value = attributes[:'one_of']).is_a?(Array)
          self.one_of = value
        end
      end

      if attributes.key?(:'pattern')
        self.pattern = attributes[:'pattern']
      end

      if attributes.key?(:'pattern_properties')
        if (value = attributes[:'pattern_properties']).is_a?(Hash)
          self.pattern_properties = value
        end
      end

      if attributes.key?(:'properties')
        if (value = attributes[:'properties']).is_a?(Hash)
          self.properties = value
        end
      end

      if attributes.key?(:'required')
        if (value = attributes[:'required']).is_a?(Array)
          self.required = value
        end
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'type')
        self.type = attributes[:'type']
      end

      if attributes.key?(:'unique_items')
        self.unique_items = attributes[:'unique_items']
      end

      if attributes.key?(:'x_kubernetes_embedded_resource')
        self.x_kubernetes_embedded_resource = attributes[:'x_kubernetes_embedded_resource']
      end

      if attributes.key?(:'x_kubernetes_int_or_string')
        self.x_kubernetes_int_or_string = attributes[:'x_kubernetes_int_or_string']
      end

      if attributes.key?(:'x_kubernetes_list_map_keys')
        if (value = attributes[:'x_kubernetes_list_map_keys']).is_a?(Array)
          self.x_kubernetes_list_map_keys = value
        end
      end

      if attributes.key?(:'x_kubernetes_list_type')
        self.x_kubernetes_list_type = attributes[:'x_kubernetes_list_type']
      end

      if attributes.key?(:'x_kubernetes_map_type')
        self.x_kubernetes_map_type = attributes[:'x_kubernetes_map_type']
      end

      if attributes.key?(:'x_kubernetes_preserve_unknown_fields')
        self.x_kubernetes_preserve_unknown_fields = attributes[:'x_kubernetes_preserve_unknown_fields']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      true
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          ref == o.ref &&
          schema == o.schema &&
          additional_items == o.additional_items &&
          additional_properties == o.additional_properties &&
          all_of == o.all_of &&
          any_of == o.any_of &&
          default == o.default &&
          definitions == o.definitions &&
          dependencies == o.dependencies &&
          description == o.description &&
          enum == o.enum &&
          example == o.example &&
          exclusive_maximum == o.exclusive_maximum &&
          exclusive_minimum == o.exclusive_minimum &&
          external_docs == o.external_docs &&
          format == o.format &&
          id == o.id &&
          items == o.items &&
          max_items == o.max_items &&
          max_length == o.max_length &&
          max_properties == o.max_properties &&
          maximum == o.maximum &&
          min_items == o.min_items &&
          min_length == o.min_length &&
          min_properties == o.min_properties &&
          minimum == o.minimum &&
          multiple_of == o.multiple_of &&
          _not == o._not &&
          nullable == o.nullable &&
          one_of == o.one_of &&
          pattern == o.pattern &&
          pattern_properties == o.pattern_properties &&
          properties == o.properties &&
          required == o.required &&
          title == o.title &&
          type == o.type &&
          unique_items == o.unique_items &&
          x_kubernetes_embedded_resource == o.x_kubernetes_embedded_resource &&
          x_kubernetes_int_or_string == o.x_kubernetes_int_or_string &&
          x_kubernetes_list_map_keys == o.x_kubernetes_list_map_keys &&
          x_kubernetes_list_type == o.x_kubernetes_list_type &&
          x_kubernetes_map_type == o.x_kubernetes_map_type &&
          x_kubernetes_preserve_unknown_fields == o.x_kubernetes_preserve_unknown_fields
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [ref, schema, additional_items, additional_properties, all_of, any_of, default, definitions, dependencies, description, enum, example, exclusive_maximum, exclusive_minimum, external_docs, format, id, items, max_items, max_length, max_properties, maximum, min_items, min_length, min_properties, minimum, multiple_of, _not, nullable, one_of, pattern, pattern_properties, properties, required, title, type, unique_items, x_kubernetes_embedded_resource, x_kubernetes_int_or_string, x_kubernetes_list_map_keys, x_kubernetes_list_type, x_kubernetes_map_type, x_kubernetes_preserve_unknown_fields].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        Kubernetes.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
